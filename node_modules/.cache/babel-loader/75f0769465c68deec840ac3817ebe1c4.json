{"remainingRequest":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/babel-loader/lib/index.js!/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/eslint-loader/index.js??ref--13-0!/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/services/base.service.js","dependencies":[{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/services/base.service.js","mtime":1592322774000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/services/base.service.js"],"names":["qs","assert","Http","ResponseWrapper","ErrorWrapper","BaseService","status","auth","rest","obj","stringify","encode","parameters","object","params","request","get","entity","response","data","content","total","Number","headers","message","error","statusText","id","window","required","post","patch","Error"],"mappings":"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","sourcesContent":["import qs from 'qs'\nimport { assert } from '@/core'\n\nimport { Http } from './http.init'\nimport { ResponseWrapper, ErrorWrapper } from './util'\n\nexport class BaseService {\n  static get entity () {\n    throw new Error('entity getter not defined')\n  }\n  /**\n   * ------------------------------\n   * @HELPERS\n   * ------------------------------\n   */\n\n  static request (status = { auth: false }) {\n    return new Http(status)\n  }\n\n  static responseWrapper (...rest) {\n    return new ResponseWrapper(...rest)\n  }\n\n  static errorWrapper (...rest) {\n    return new ErrorWrapper(...rest)\n  }\n\n  static querystring (obj) {\n    return qs.stringify(obj, {\n      encode: false\n    })\n  }\n\n  /**\n   * ------------------------------\n   * @API_CALLS_PUBLIC\n   * ------------------------------\n   */\n\n  static async getListPublic (parameters = {}) {\n    assert.object(parameters)\n\n    const params = { ...parameters }\n\n    try {\n      const response = await this.request().get(`${this.entity}`, { params })\n      const data = {\n        content: response.data.data,\n        total: Number(response.headers['x-total-count'])\n      }\n\n      return new ResponseWrapper(response, data)\n    } catch (error) {\n      const message = error.response.data ? error.response.data.error : error.response.statusText\n      throw new ErrorWrapper(error, message)\n    }\n  }\n\n  static async getByIdPublic (id = window.required()) {\n    assert.id(id, { required: true })\n\n    try {\n      const response = await this.request().get(`${this.entity}/${id}`)\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      const message = error.response.data ? error.response.data.error : error.response.statusText\n      throw new ErrorWrapper(error, message)\n    }\n  }\n\n  /**\n   * ------------------------------\n   * @API_CALLS_PRIVATE\n   * ------------------------------\n   */\n\n  static async getById (id) {\n    assert.id(id, { required: true })\n\n    try {\n      const response = await this.request({ auth: true }).get(`${this.entity}/${id}`)\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      const message = error.response.data ? error.response.data.error : error.response.statusText\n      throw new ErrorWrapper(error, message)\n    }\n  }\n\n  static async create (data = {}) {\n    assert.object(data, { required: true })\n\n    try {\n      const response = await this.request({ auth: true }).post(`${this.entity}`, data)\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      throw new ErrorWrapper(error)\n    }\n  }\n\n  static async update (id, data = {}) {\n    assert.id(id, { required: true })\n    assert.object(data, { required: true })\n\n    try {\n      const response = await this.request({ auth: true }).patch(`${this.entity}/${id}`, data)\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      throw new ErrorWrapper(error)\n    }\n  }\n\n  static async remove (id) {\n    assert.id(id, { required: true })\n\n    try {\n      const response = await this.request({ auth: true }).delete(`${this.entity}/${id}`)\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      throw new ErrorWrapper(error)\n    }\n  }\n}\n"]}]}