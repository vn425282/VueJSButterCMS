{"remainingRequest":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/babel-loader/lib/index.js!/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/eslint-loader/index.js??ref--13-0!/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/core/assert/index.js","dependencies":[{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/core/assert/index.js","mtime":1592322774000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvamFja3Nvbi9Eb2N1bWVudHMvV29yay9ERU1PL1Z1ZUpTQnV0dGVyQ01TL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL1VzZXJzL2phY2tzb24vRG9jdW1lbnRzL1dvcmsvREVNTy9WdWVKU0J1dHRlckNNUy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3R5cGVvZiBmcm9tICIvVXNlcnMvamFja3Nvbi9Eb2N1bWVudHMvV29yay9ERU1PL1Z1ZUpTQnV0dGVyQ01TL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgeyBBc3NlcnRpb25FcnJvciB9IGZyb20gJy4vQXNzZXJ0aW9uRXJyb3InOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwp2YXIgVVVJRF9SRUdFWFAgPSAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pOwp2YXIgVVJMX1JFR0VYUCA9IC9eKGh0dHBzP3xmdHApOlwvXC9bXlxzLyQuPyNdLlteXHNdKiQvaTsKdmFyIHZhbGlkVHlwZXMgPSBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdCwgQXJyYXksIEJvb2xlYW4sIEZ1bmN0aW9uXTsKCmZ1bmN0aW9uIGlzT2JqZWN0KHYpIHsKICByZXR1cm4gdiAmJiBfdHlwZW9mKHYpID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2KTsKfQoKZXhwb3J0IHZhciBBc3NlcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFzc2VydCgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NlcnQpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFzc2VydCwgbnVsbCwgW3sKICAgIGtleTogImZhaWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobWVzc2FnZSB8fCAiRmFpbGVkIHZhbHVlOiAiLmNvbmNhdCh1dGlsLmluc3BlY3QoYWN0dWFsKSwgIjsgIikuY29uY2F0KGV4cGVjdGVkICE9PSB1bmRlZmluZWQgPyAiRXhwZWN0OiAiLmNvbmNhdCh1dGlsLmluc3BlY3QoZXhwZWN0ZWQubmFtZSB8fCBleHBlY3RlZCkpIDogJycpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc09rIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc09rKHZhbHVlKSB7CiAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIF9yZWYkbWVzc2FnZSA9IF9yZWYubWVzc2FnZSwKICAgICAgICAgIG1lc3NhZ2UgPSBfcmVmJG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZiRtZXNzYWdlLAogICAgICAgICAgX3JlZiRyZXF1aXJlZCA9IF9yZWYucmVxdWlyZWQsCiAgICAgICAgICByZXF1aXJlZCA9IF9yZWYkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRyZXF1aXJlZDsKCiAgICAgIGlmICghdmFsdWUgJiYgcmVxdWlyZWQpIEFzc2VydC5mYWlsKHZhbHVlLCAnVHJ1dGhmdWwgdmFsdWUnLCBtZXNzYWdlKTsKICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIXZhbHVlKSBBc3NlcnQuZmFpbCh2YWx1ZSwgJ1RydXRoZnVsIHZhbHVlJywgbWVzc2FnZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVmaW5lZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkgewogICAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgX3JlZjIkbWVzc2FnZSA9IF9yZWYyLm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjIkbWVzc2FnZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmMiRtZXNzYWdlOwoKICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIEFzc2VydC5mYWlsKHZhbHVlLCAnTm8gdW5kZWZpbmVkIHZhbHVlcycsIG1lc3NhZ2UpOwogICAgfQogIH0sIHsKICAgIGtleTogImluc3RhbmNlT2YiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIHR5cGUpIHsKICAgICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSwKICAgICAgICAgIF9yZWYzJG1lc3NhZ2UgPSBfcmVmMy5tZXNzYWdlLAogICAgICAgICAgbWVzc2FnZSA9IF9yZWYzJG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZjMkbWVzc2FnZTsKCiAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgdHlwZSkpIHsKICAgICAgICBBc3NlcnQuZmFpbCh2YWx1ZSwgdHlwZSwgbWVzc2FnZSB8fCAiRmFpbGVkIGluc3RhbmNlOiAiLmNvbmNhdCh1dGlsLmluc3BlY3QodmFsdWUpLCAiOyBFeHBlY3QgaW5zdGFuY2Ugb2YgIikuY29uY2F0KHV0aWwuaW5zcGVjdCh0eXBlLm5hbWUgfHwgdHlwZSksICIgY2xhc3MiKSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0eXBlT2YiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHR5cGVPZih2YWx1ZSwgdHlwZSwgbWVzc2FnZSkgewogICAgICBpZiAoIXZhbGlkVHlwZXMuaW5jbHVkZXModHlwZSkpIHsKICAgICAgICBBc3NlcnQuZmFpbCh2YWx1ZSwgdHlwZSwgbWVzc2FnZSB8fCAiQXNzZXJ0LnR5cGVPZiBhY2NlcHQgb25lIG9mIFsiLmNvbmNhdCh2YWxpZFR5cGVzLm1hcChmdW5jdGlvbiAodCkgewogICAgICAgICAgcmV0dXJuIHQubmFtZTsKICAgICAgICB9KSwgIl0gdHlwZXMuIFVzZSBhbm90aGVyIG1ldGhvZCB0byB2YWxpZGF0ZSBcIiIpLmNvbmNhdCh0eXBlLCAiXCIiKSk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlID09PSBOdW1iZXIgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpKSByZXR1cm47CiAgICAgIGlmICh0eXBlID09PSBTdHJpbmcgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuOwogICAgICBpZiAodHlwZSA9PT0gT2JqZWN0ICYmIGlzT2JqZWN0KHZhbHVlKSkgcmV0dXJuOwogICAgICBpZiAodHlwZSA9PT0gQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybjsKICAgICAgaWYgKHR5cGUgPT09IEJvb2xlYW4gJiYgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHJldHVybjsKICAgICAgaWYgKHR5cGUgPT09IEZ1bmN0aW9uICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuOwogICAgICBBc3NlcnQuZmFpbCh2YWx1ZSwgdHlwZSwgbWVzc2FnZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYXJyYXkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFycmF5KHZhbHVlKSB7CiAgICAgIHZhciBfcmVmNCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sCiAgICAgICAgICBfcmVmNCRyZXF1aXJlZCA9IF9yZWY0LnJlcXVpcmVkLAogICAgICAgICAgcmVxdWlyZWQgPSBfcmVmNCRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNCRyZXF1aXJlZCwKICAgICAgICAgIF9yZWY0JG5vdEVtcHR5ID0gX3JlZjQubm90RW1wdHksCiAgICAgICAgICBub3RFbXB0eSA9IF9yZWY0JG5vdEVtcHR5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY0JG5vdEVtcHR5LAogICAgICAgICAgX3JlZjQkbWVzc2FnZSA9IF9yZWY0Lm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjQkbWVzc2FnZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmNCRtZXNzYWdlLAogICAgICAgICAgX3JlZjQkb2YgPSBfcmVmNC5vZiwKICAgICAgICAgIG9mID0gX3JlZjQkb2YgPT09IHZvaWQgMCA/IFtdIDogX3JlZjQkb2Y7CgogICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2YpKSBBc3NlcnQuZmFpbChvZiwgJ29mIG9wdGlvbiBleHBlY3QgYW4gQXJyYXkgdHlwZScpOwoKICAgICAgaWYgKCFvZi5ldmVyeShmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiB2YWxpZFR5cGVzLmluY2x1ZGVzKGkpOwogICAgICB9KSkgewogICAgICAgIEFzc2VydC5mYWlsKHZhbHVlLCBvZiwgbWVzc2FnZSB8fCAiQXNzZXJ0LmFycmF5ICdvZicgb3B0aW9uIGFjY2VwdCBvbmx5IG9uZSBvZiBbIi5jb25jYXQodmFsaWRUeXBlcy5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgIHJldHVybiB0Lm5hbWU7CiAgICAgICAgfSksICJdIHR5cGVzIikpOwogICAgICB9CgogICAgICBpZiAocmVxdWlyZWQgfHwgbm90RW1wdHkpIEFzc2VydC50eXBlT2YodmFsdWUsIEFycmF5LCBtZXNzYWdlKTsKICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIEFzc2VydC50eXBlT2YodmFsdWUsIEFycmF5LCBtZXNzYWdlKTsKICAgICAgaWYgKHZhbHVlICYmICF2YWx1ZS5sZW5ndGggJiYgbm90RW1wdHkpIEFzc2VydC5mYWlsKHZhbHVlLCAnTm90IGVtcHR5IGFycmF5Jyk7CiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggJiYgb2YubGVuZ3RoICYmICF2YWx1ZS5ldmVyeShmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBvZi5pbmNsdWRlcyhpLmNvbnN0cnVjdG9yKTsKICAgICAgfSkpIEFzc2VydC5mYWlsKHZhbHVlLCAiQXJyYXkgb2Ygc29tZSBbIi5jb25jYXQob2YubWFwKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgcmV0dXJuIHQubmFtZTsKICAgICAgfSksICJdIHR5cGVzIikpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9iamVjdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb2JqZWN0KHZhbHVlKSB7CiAgICAgIHZhciBfcmVmNSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sCiAgICAgICAgICBfcmVmNSRyZXF1aXJlZCA9IF9yZWY1LnJlcXVpcmVkLAogICAgICAgICAgcmVxdWlyZWQgPSBfcmVmNSRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNSRyZXF1aXJlZCwKICAgICAgICAgIF9yZWY1JG5vdEVtcHR5ID0gX3JlZjUubm90RW1wdHksCiAgICAgICAgICBub3RFbXB0eSA9IF9yZWY1JG5vdEVtcHR5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY1JG5vdEVtcHR5LAogICAgICAgICAgX3JlZjUkbWVzc2FnZSA9IF9yZWY1Lm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjUkbWVzc2FnZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmNSRtZXNzYWdlOwoKICAgICAgaWYgKHJlcXVpcmVkIHx8IG5vdEVtcHR5KSBBc3NlcnQudHlwZU9mKHZhbHVlLCBPYmplY3QsIG1lc3NhZ2UpOwogICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgQXNzZXJ0LnR5cGVPZih2YWx1ZSwgT2JqZWN0LCBtZXNzYWdlKTsKICAgICAgaWYgKG5vdEVtcHR5ICYmICFPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoKSBBc3NlcnQuZmFpbCh2YWx1ZSwgJ05vdCBlbXB0eSBvYmplY3QnLCBtZXNzYWdlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJudW1iZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG51bWJlcih2YWx1ZSkgewogICAgICB2YXIgX3JlZjYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgX3JlZjYkcmVxdWlyZWQgPSBfcmVmNi5yZXF1aXJlZCwKICAgICAgICAgIHJlcXVpcmVkID0gX3JlZjYkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjYkcmVxdWlyZWQsCiAgICAgICAgICBfcmVmNiRtZXNzYWdlID0gX3JlZjYubWVzc2FnZSwKICAgICAgICAgIG1lc3NhZ2UgPSBfcmVmNiRtZXNzYWdlID09PSB2b2lkIDAgPyAnJyA6IF9yZWY2JG1lc3NhZ2U7CgogICAgICBpZiAocmVxdWlyZWQpIEFzc2VydC50eXBlT2YodmFsdWUsIE51bWJlciwgbWVzc2FnZSk7CiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBBc3NlcnQudHlwZU9mKHZhbHVlLCBOdW1iZXIsIG1lc3NhZ2UpOwogICAgfQogIH0sIHsKICAgIGtleTogImludGVnZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGludGVnZXIodmFsdWUpIHsKICAgICAgdmFyIF9yZWY3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIF9yZWY3JHJlcXVpcmVkID0gX3JlZjcucmVxdWlyZWQsCiAgICAgICAgICByZXF1aXJlZCA9IF9yZWY3JHJlcXVpcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY3JHJlcXVpcmVkLAogICAgICAgICAgbWluID0gX3JlZjcubWluLAogICAgICAgICAgbWF4ID0gX3JlZjcubWF4LAogICAgICAgICAgX3JlZjckbWVzc2FnZSA9IF9yZWY3Lm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjckbWVzc2FnZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmNyRtZXNzYWdlOwoKICAgICAgdmFyIGlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIodmFsdWUpOwogICAgICBpZiAocmVxdWlyZWQgJiYgIWlzSW50ZWdlcikgQXNzZXJ0LmZhaWwodmFsdWUsICdJbnRlZ2VyJywgbWVzc2FnZSk7CiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFpc0ludGVnZXIpIEFzc2VydC5mYWlsKHZhbHVlLCAnSW50ZWdlcicsIG1lc3NhZ2UpOwoKICAgICAgaWYgKHR5cGVvZiBtaW4gPT09ICdudW1iZXInKSB7CiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgaXNJbnRlZ2VyICYmIHZhbHVlIDwgbWluKSBBc3NlcnQuZmFpbCh2YWx1ZSwgIk1pbmltYWwgdmFsdWU6ICIuY29uY2F0KG1pbiksIG1lc3NhZ2UpOwogICAgICB9CgogICAgICBpZiAodHlwZW9mIG1heCA9PT0gJ251bWJlcicpIHsKICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiBpc0ludGVnZXIgJiYgdmFsdWUgPiBtYXgpIEFzc2VydC5mYWlsKHZhbHVlLCAiTWF4aW11bSB2YWx1ZTogIi5jb25jYXQobWF4KSwgbWVzc2FnZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdHJpbmciLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkgewogICAgICB2YXIgX3JlZjggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgX3JlZjgkcmVxdWlyZWQgPSBfcmVmOC5yZXF1aXJlZCwKICAgICAgICAgIHJlcXVpcmVkID0gX3JlZjgkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjgkcmVxdWlyZWQsCiAgICAgICAgICBfcmVmOCRub3RFbXB0eSA9IF9yZWY4Lm5vdEVtcHR5LAogICAgICAgICAgbm90RW1wdHkgPSBfcmVmOCRub3RFbXB0eSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmOCRub3RFbXB0eSwKICAgICAgICAgIF9yZWY4JG1lc3NhZ2UgPSBfcmVmOC5tZXNzYWdlLAogICAgICAgICAgbWVzc2FnZSA9IF9yZWY4JG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZjgkbWVzc2FnZTsKCiAgICAgIGlmIChyZXF1aXJlZCB8fCBub3RFbXB0eSkgQXNzZXJ0LnR5cGVPZih2YWx1ZSwgU3RyaW5nLCBtZXNzYWdlKTsKICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIEFzc2VydC50eXBlT2YodmFsdWUsIFN0cmluZywgbWVzc2FnZSk7CiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICF2YWx1ZS50cmltKCkubGVuZ3RoICYmIG5vdEVtcHR5KSBBc3NlcnQuZmFpbCh2YWx1ZSwgJ05vdCBlbXB0eSBzdHJpbmcnLCBtZXNzYWdlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJib29sZWFuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7CiAgICAgIHZhciBfcmVmOSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sCiAgICAgICAgICBfcmVmOSRyZXF1aXJlZCA9IF9yZWY5LnJlcXVpcmVkLAogICAgICAgICAgcmVxdWlyZWQgPSBfcmVmOSRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmOSRyZXF1aXJlZCwKICAgICAgICAgIF9yZWY5JG1lc3NhZ2UgPSBfcmVmOS5tZXNzYWdlLAogICAgICAgICAgbWVzc2FnZSA9IF9yZWY5JG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZjkkbWVzc2FnZTsKCiAgICAgIGlmIChyZXF1aXJlZCkgQXNzZXJ0LnR5cGVPZih2YWx1ZSwgQm9vbGVhbiwgbWVzc2FnZSk7CiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBBc3NlcnQudHlwZU9mKHZhbHVlLCBCb29sZWFuLCBtZXNzYWdlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJidWZmZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJ1ZmZlcih2YWx1ZSkgewogICAgICB2YXIgX3JlZjEwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIF9yZWYxMCRyZXF1aXJlZCA9IF9yZWYxMC5yZXF1aXJlZCwKICAgICAgICAgIHJlcXVpcmVkID0gX3JlZjEwJHJlcXVpcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxMCRyZXF1aXJlZCwKICAgICAgICAgIF9yZWYxMCRub3RFbXB0eSA9IF9yZWYxMC5ub3RFbXB0eSwKICAgICAgICAgIG5vdEVtcHR5ID0gX3JlZjEwJG5vdEVtcHR5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxMCRub3RFbXB0eSwKICAgICAgICAgIF9yZWYxMCRtZXNzYWdlID0gX3JlZjEwLm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjEwJG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZjEwJG1lc3NhZ2U7CgogICAgICBpZiAocmVxdWlyZWQgJiYgIUJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIEFzc2VydC5mYWlsKHZhbHVlLCAnQnVmZmVyJywgbWVzc2FnZSk7CiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSBBc3NlcnQuZmFpbCh2YWx1ZSwgJ0J1ZmZlcicsIG1lc3NhZ2UpOwogICAgICBpZiAoIXZhbHVlLmxlbmd0aCAmJiBub3RFbXB0eSkgQXNzZXJ0LmZhaWwodmFsdWUsICdOb3QgZW1wdHkgYnVmZmVyJywgbWVzc2FnZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGF0ZSh2YWx1ZSkgewogICAgICB2YXIgX3JlZjExID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIF9yZWYxMSRyZXF1aXJlZCA9IF9yZWYxMS5yZXF1aXJlZCwKICAgICAgICAgIHJlcXVpcmVkID0gX3JlZjExJHJlcXVpcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxMSRyZXF1aXJlZCwKICAgICAgICAgIF9yZWYxMSRtZXNzYWdlID0gX3JlZjExLm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjExJG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZjExJG1lc3NhZ2U7CgogICAgICBpZiAocmVxdWlyZWQpIEFzc2VydC5pbnN0YW5jZU9mKHZhbHVlLCBEYXRlLCBtZXNzYWdlKTsKICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIEFzc2VydC5pbnN0YW5jZU9mKHZhbHVlLCBEYXRlLCBtZXNzYWdlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmdW5jIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmdW5jKHZhbHVlKSB7CiAgICAgIHZhciBfcmVmMTIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgX3JlZjEyJHJlcXVpcmVkID0gX3JlZjEyLnJlcXVpcmVkLAogICAgICAgICAgcmVxdWlyZWQgPSBfcmVmMTIkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEyJHJlcXVpcmVkLAogICAgICAgICAgX3JlZjEyJG1lc3NhZ2UgPSBfcmVmMTIubWVzc2FnZSwKICAgICAgICAgIG1lc3NhZ2UgPSBfcmVmMTIkbWVzc2FnZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmMTIkbWVzc2FnZTsKCiAgICAgIGlmIChyZXF1aXJlZCkgQXNzZXJ0LnR5cGVPZih2YWx1ZSwgRnVuY3Rpb24sIG1lc3NhZ2UpOwogICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgQXNzZXJ0Lmluc3RhbmNlT2YodmFsdWUsIEZ1bmN0aW9uLCBtZXNzYWdlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaWQodmFsdWUpIHsKICAgICAgdmFyIF9yZWYxMyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sCiAgICAgICAgICBfcmVmMTMkcmVxdWlyZWQgPSBfcmVmMTMucmVxdWlyZWQsCiAgICAgICAgICByZXF1aXJlZCA9IF9yZWYxMyRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTMkcmVxdWlyZWQsCiAgICAgICAgICBfcmVmMTMkbWVzc2FnZSA9IF9yZWYxMy5tZXNzYWdlLAogICAgICAgICAgbWVzc2FnZSA9IF9yZWYxMyRtZXNzYWdlID09PSB2b2lkIDAgPyAnJyA6IF9yZWYxMyRtZXNzYWdlOwoKICAgICAgdmFyIF9pbnQgPSBOdW1iZXIodmFsdWUpOwoKICAgICAgdmFyIGlzUG9zaXRpdmVJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlcihfaW50KSAmJiBfaW50ICE9PSAwICYmIF9pbnQgPiAwOwoKICAgICAgdmFyIGlzVWlpZCA9IFVVSURfUkVHRVhQLnRlc3QodmFsdWUpOwogICAgICB2YXIgaXNWYWxpZElkID0gaXNQb3NpdGl2ZUludGVnZXIgfHwgaXNVaWlkOwogICAgICBpZiAoIWlzVmFsaWRJZCAmJiByZXF1aXJlZCkgQXNzZXJ0LmZhaWwodmFsdWUsICdVVUlEIG9yIE51bWJlcicsIG1lc3NhZ2UpOwogICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhaXNWYWxpZElkKSBBc3NlcnQuZmFpbCh2YWx1ZSwgJ1VVSUQgb3IgTnVtYmVyJywgbWVzc2FnZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidXVpZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXVpZCh2YWx1ZSkgewogICAgICB2YXIgX3JlZjE0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIF9yZWYxNCRyZXF1aXJlZCA9IF9yZWYxNC5yZXF1aXJlZCwKICAgICAgICAgIHJlcXVpcmVkID0gX3JlZjE0JHJlcXVpcmVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxNCRyZXF1aXJlZCwKICAgICAgICAgIF9yZWYxNCRtZXNzYWdlID0gX3JlZjE0Lm1lc3NhZ2UsCiAgICAgICAgICBtZXNzYWdlID0gX3JlZjE0JG1lc3NhZ2UgPT09IHZvaWQgMCA/ICcnIDogX3JlZjE0JG1lc3NhZ2U7CgogICAgICBBc3NlcnQuc3RyaW5nKHZhbHVlLCB7CiAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLAogICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UKICAgICAgfSk7CiAgICAgIGlmICh2YWx1ZSAmJiAhVVVJRF9SRUdFWFAudGVzdCh2YWx1ZSkpIEFzc2VydC5mYWlsKHZhbHVlLCAnVVVJRCcsIG1lc3NhZ2UpOwogICAgfQogIH0sIHsKICAgIGtleTogInVybCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXJsKHZhbHVlKSB7CiAgICAgIHZhciBfcmVmMTUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LAogICAgICAgICAgX3JlZjE1JHJlcXVpcmVkID0gX3JlZjE1LnJlcXVpcmVkLAogICAgICAgICAgcmVxdWlyZWQgPSBfcmVmMTUkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjE1JHJlcXVpcmVkLAogICAgICAgICAgX3JlZjE1JG1lc3NhZ2UgPSBfcmVmMTUubWVzc2FnZSwKICAgICAgICAgIG1lc3NhZ2UgPSBfcmVmMTUkbWVzc2FnZSA9PT0gdm9pZCAwID8gJycgOiBfcmVmMTUkbWVzc2FnZTsKCiAgICAgIEFzc2VydC5zdHJpbmcodmFsdWUsIHsKICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsCiAgICAgICAgbWVzc2FnZTogbWVzc2FnZQogICAgICB9KTsKICAgICAgaWYgKHZhbHVlICYmICFVUkxfUkVHRVhQLnRlc3QodmFsdWUpKSBBc3NlcnQuZmFpbCh2YWx1ZSwgJ1VSTCcsIG1lc3NhZ2UpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFzc2VydDsKfSgpOw=="},{"version":3,"sources":["/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/core/assert/index.js"],"names":["AssertionError","util","UUID_REGEXP","URL_REGEXP","validTypes","Number","String","Object","Array","Boolean","Function","isObject","v","isArray","Assert","actual","expected","message","inspect","undefined","name","value","required","fail","type","includes","map","t","isNaN","notEmpty","of","every","i","typeOf","length","constructor","keys","min","max","isInteger","trim","Buffer","isBuffer","instanceOf","Date","int","isPositiveInteger","isUiid","test","isValidId","string"],"mappings":"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","sourcesContent":["import { AssertionError } from './AssertionError'\nimport * as util from 'util'\n\nconst UUID_REGEXP = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\nconst URL_REGEXP = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i\nconst validTypes = [Number, String, Object, Array, Boolean, Function]\n\nfunction isObject (v) {\n  return v && (typeof v === 'object') && !Array.isArray(v)\n}\n\nexport class Assert {\n  static fail (actual, expected, message) {\n    throw new AssertionError(message || `Failed value: ${util.inspect(actual)}; ${expected !== undefined ? `Expect: ${util.inspect(expected.name || expected)}` : ''}`)\n  }\n\n  static isOk (value, { message = '', required = false } = {}) {\n    if (!value && required) Assert.fail(value, 'Truthful value', message)\n    if (value !== undefined && !value) Assert.fail(value, 'Truthful value', message)\n  }\n\n  static defined (value, { message = '' } = {}) {\n    if (value === undefined) Assert.fail(value, 'No undefined values', message)\n  }\n\n  static instanceOf (value, type, { message = '' } = {}) {\n    if (!(value instanceof type)) {\n      Assert.fail(value, type, message || `Failed instance: ${util.inspect(value)}; Expect instance of ${util.inspect(type.name || type)} class`)\n    }\n  }\n\n  static typeOf (value, type, message) {\n    if (!validTypes.includes(type)) {\n      Assert.fail(value, type, message || `Assert.typeOf accept one of [${validTypes.map(t => t.name)}] types. Use another method to validate \"${type}\"`)\n    }\n\n    if ((type === Number) && (typeof value === 'number') && !isNaN(value)) return\n    if ((type === String) && typeof value === 'string') return\n    if ((type === Object) && isObject(value)) return\n    if ((type === Array) && Array.isArray(value)) return\n    if ((type === Boolean) && typeof value === 'boolean') return\n    if ((type === Function) && typeof value === 'function') return\n\n    Assert.fail(value, type, message)\n  }\n\n  static array (value, { required = false, notEmpty = false, message = '', of = [] } = {}) {\n    if (!Array.isArray(of)) Assert.fail(of, 'of option expect an Array type')\n    if (!of.every(i => validTypes.includes(i))) {\n      Assert.fail(value, of, message || `Assert.array 'of' option accept only one of [${validTypes.map(t => t.name)}] types`)\n    }\n    if (required || notEmpty) Assert.typeOf(value, Array, message)\n    if (value !== undefined) Assert.typeOf(value, Array, message)\n    if (value && !value.length && notEmpty) Assert.fail(value, 'Not empty array')\n    if (value && value.length && of.length && !value.every(i => of.includes(i.constructor))) Assert.fail(value, `Array of some [${of.map(t => t.name)}] types`)\n  }\n\n  static object (value, { required = false, notEmpty = false, message = '' } = {}) {\n    if (required || notEmpty) Assert.typeOf(value, Object, message)\n    if (value !== undefined) Assert.typeOf(value, Object, message)\n    if (notEmpty && !Object.keys(value).length) Assert.fail(value, 'Not empty object', message)\n  }\n\n  static number (value, { required = false, message = '' } = {}) {\n    if (required) Assert.typeOf(value, Number, message)\n    if (value !== undefined) Assert.typeOf(value, Number, message)\n  }\n\n  static integer (value, { required = false, min, max, message = '' } = {}) {\n    const isInteger = Number.isInteger(value)\n\n    if (required && !isInteger) Assert.fail(value, 'Integer', message)\n    if (value !== undefined && !isInteger) Assert.fail(value, 'Integer', message)\n\n    if (typeof min === 'number') {\n      if (value !== undefined && isInteger && value < min) Assert.fail(value, `Minimal value: ${min}`, message)\n    }\n    if (typeof max === 'number') {\n      if (value !== undefined && isInteger && value > max) Assert.fail(value, `Maximum value: ${max}`, message)\n    }\n  }\n\n  static string (value, { required = false, notEmpty = false, message = '' } = {}) {\n    if (required || notEmpty) Assert.typeOf(value, String, message)\n    if (value !== undefined) Assert.typeOf(value, String, message)\n    if (value !== undefined && !value.trim().length && notEmpty) Assert.fail(value, 'Not empty string', message)\n  }\n\n  static boolean (value, { required = false, message = '' } = {}) {\n    if (required) Assert.typeOf(value, Boolean, message)\n    if (value !== undefined) Assert.typeOf(value, Boolean, message)\n  }\n\n  static buffer (value, { required = false, notEmpty = false, message = '' } = {}) {\n    if (required && !Buffer.isBuffer(value)) Assert.fail(value, 'Buffer', message)\n    if (value !== undefined && !Buffer.isBuffer(value)) Assert.fail(value, 'Buffer', message)\n    if (!value.length && notEmpty) Assert.fail(value, 'Not empty buffer', message)\n  }\n\n  static date (value, { required = false, message = '' } = {}) {\n    if (required) Assert.instanceOf(value, Date, message)\n    if (value !== undefined) Assert.instanceOf(value, Date, message)\n  }\n\n  static func (value, { required = false, message = '' } = {}) {\n    if (required) Assert.typeOf(value, Function, message)\n    if (value !== undefined) Assert.instanceOf(value, Function, message)\n  }\n\n  static id (value, { required = false, message = '' } = {}) {\n    const int = Number(value)\n    const isPositiveInteger = Number.isInteger(int) && (int !== 0) && int > 0\n    const isUiid = UUID_REGEXP.test(value)\n    const isValidId = isPositiveInteger || isUiid\n    if (!isValidId && required) Assert.fail(value, 'UUID or Number', message)\n    if (value !== undefined && !isValidId) Assert.fail(value, 'UUID or Number', message)\n  }\n\n  static uuid (value, { required = false, message = '' } = {}) {\n    Assert.string(value, { required, message })\n    if (value && !UUID_REGEXP.test(value)) Assert.fail(value, 'UUID', message)\n  }\n\n  static url (value, { required = false, message = '' } = {}) {\n    Assert.string(value, { required, message })\n    if (value && !URL_REGEXP.test(value)) Assert.fail(value, 'URL', message)\n  }\n}\n"]}]}