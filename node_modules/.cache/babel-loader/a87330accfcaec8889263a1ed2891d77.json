{"remainingRequest":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/babel-loader/lib/index.js!/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/eslint-loader/index.js??ref--13-0!/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/services/auth.service.js","dependencies":[{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/services/auth.service.js","mtime":1592322774000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jackson/Documents/Work/DEMO/VueJSButterCMS/src/services/auth.service.js"],"names":["Fingerprint2","UAParser","axios","Http","ResponseWrapper","ErrorWrapper","$store","$router","API_URL","BEARER","AuthService","email","password","_getFingerprint","fingerprint","post","withCredentials","response","_setAuthData","accessToken","data","exp","_parseTokenData","auth","_resetAuthData","push","name","console","log","code","accessTokenExpDate","state","nowTime","Math","floor","Date","getTime","Boolean","localStorage","getItem","status","includes","Error","setItem","inner","ms","timer","resolves","clearTimeout","setTimeout","result","forEach","r","Promise","resolve","_debounce","refreshTokens","payload","tokenData","split","JSON","parse","atob","error","commit","setRefreshToken","setBearer","reject","getHash","options","excludes","plugins","adBlock","screenResolution","availableScreenResolution","enumerateDevices","pixelRatio","doNotTrack","preprocessor","key","value","parser","getOS","getBrowser","getEngine","getPromise","components","values","map","component","String","x64hash128","join","window","requestIdleCallback"],"mappings":"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","sourcesContent":["import * as Fingerprint2 from 'fingerprintjs2'\nimport * as UAParser from 'ua-parser-js'\nimport axios from 'axios'\n\nimport { Http } from './http.init'\nimport { ResponseWrapper, ErrorWrapper } from './util'\nimport $store from '../store'\nimport $router from '../router'\n\nimport { API_URL } from '../.env'\n\nlet BEARER = ''\n\nexport class AuthService {\n  /**\n   ******************************\n   * @API\n   ******************************\n   */\n\n  static async makeLogin ({ email, password }) {\n    try {\n      const fingerprint = await _getFingerprint()\n      const response = await axios.post(`${API_URL}/auth/login`,\n        { email, password, fingerprint },\n        { withCredentials: true })\n      _setAuthData({\n        accessToken: response.data.data.accessToken,\n        exp: _parseTokenData(response.data.data.accessToken).exp\n      })\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      throw new ErrorWrapper(error)\n    }\n  }\n\n  static async makeLogout () {\n    try {\n      const response = await new Http({ auth: true }).post('auth/logout', {}, { withCredentials: true })\n      _resetAuthData()\n      $router.push({ name: 'login' }).catch(() => {})\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      throw new ErrorWrapper(error)\n    }\n  }\n\n  static async refreshTokens () {\n    try {\n      const response = await axios.post(`${API_URL}/auth/refresh-tokens`, {\n        fingerprint: await _getFingerprint()\n      }, { withCredentials: true })\n\n      _setAuthData({\n        accessToken: response.data.data.accessToken,\n        exp: _parseTokenData(response.data.data.accessToken).exp\n      })\n      return new ResponseWrapper(response, response.data.data)\n    } catch (error) {\n      console.log(error.response.data.code)\n      _resetAuthData()\n      $router.push({ name: 'login' }).catch(() => {})\n      throw new ErrorWrapper(error)\n    }\n  }\n\n  static debounceRefreshTokens = this._debounce(() => {\n    return this.refreshTokens()\n  }, 100)\n\n  /**\n   ******************************\n   * @METHODS\n   ******************************\n   */\n\n  static isAccessTokenExpired () {\n    const accessTokenExpDate = $store.state.auth.accessTokenExpDate - 10\n    const nowTime = Math.floor(new Date().getTime() / 1000)\n\n    return accessTokenExpDate <= nowTime\n  }\n\n  static hasRefreshToken () {\n    return Boolean(localStorage.getItem('refreshToken'))\n  }\n\n  static setRefreshToken (status) {\n    if (!['', 'true'].includes(status)) {\n      throw new Error(`setRefreshToken: invalid value ${status}; Expect one of ['', 'true']`)\n    }\n\n    localStorage.setItem('refreshToken', status)\n  }\n\n  static getBearer () {\n    return BEARER\n  }\n\n  static setBearer (accessToken) {\n    BEARER = `Bearer ${accessToken}`\n  }\n\n  /**\n   * https://stackoverflow.com/questions/35228052/debounce-function-implemented-with-promises\n   * @param inner\n   * @param ms\n   * @returns {function(...[*]): Promise<unknown>}\n   * @private\n   */\n  static _debounce (inner, ms = 0) {\n    let timer = null\n    let resolves = []\n\n    return function () {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        const result = inner()\n        resolves.forEach(r => r(result))\n        resolves = []\n      }, ms)\n\n      return new Promise(resolve => resolves.push(resolve))\n    }\n  }\n}\n\n/**\n ******************************\n * @private_methods\n ******************************\n */\n\nfunction _parseTokenData (accessToken) {\n  let payload = ''\n  let tokenData = {}\n\n  try {\n    payload = accessToken.split('.')[1]\n    tokenData = JSON.parse(atob(payload))\n  } catch (error) {\n    throw new Error(error)\n  }\n\n  return tokenData\n}\n\nfunction _resetAuthData () {\n  // reset userData in store\n  $store.commit('user/SET_CURRENT_USER', {})\n  $store.commit('auth/SET_ATOKEN_EXP_DATE', null)\n  // reset tokens\n  AuthService.setRefreshToken('')\n  AuthService.setBearer('')\n}\n\nfunction _setAuthData ({ accessToken, exp } = {}) {\n  AuthService.setRefreshToken('true')\n  AuthService.setBearer(accessToken)\n  $store.commit('auth/SET_ATOKEN_EXP_DATE', exp)\n}\n\nfunction _getFingerprint () {\n  return new Promise((resolve, reject) => {\n    async function getHash () {\n      const options = {\n        excludes: {\n          plugins: true,\n          localStorage: true,\n          adBlock: true,\n          screenResolution: true,\n          availableScreenResolution: true,\n          enumerateDevices: true,\n          pixelRatio: true,\n          doNotTrack: true,\n          preprocessor: (key, value) => {\n            if (key === 'userAgent') {\n              const parser = new UAParser(value)\n              // return customized user agent (without browser version)\n              return `${parser.getOS().name} :: ${parser.getBrowser().name} :: ${parser.getEngine().name}`\n            }\n            return value\n          }\n        }\n      }\n\n      try {\n        const components = await Fingerprint2.getPromise(options)\n        const values = components.map(component => component.value)\n        console.log('fingerprint hash components', components)\n\n        return String(Fingerprint2.x64hash128(values.join(''), 31))\n      } catch (e) {\n        reject(e)\n      }\n    }\n\n    if (window.requestIdleCallback) {\n      console.log('get fp hash @ requestIdleCallback')\n      requestIdleCallback(async () => resolve(await getHash()))\n    } else {\n      console.log('get fp hash @ setTimeout')\n      setTimeout(async () => resolve(await getHash()), 500)\n    }\n  })\n}\n"]}]}